package ac.at.tuwien.dsg.uml.statemachine.export.transformation.util;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UncheckedIOException;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IPath;
import org.eclipse.jdt.core.ToolFactory;
import org.eclipse.jdt.core.formatter.CodeFormatter;
import org.eclipse.jdt.core.jdom.IDOMNode;
import org.eclipse.jface.text.BadLocationException;
import org.eclipse.jface.text.Document;
import org.eclipse.jface.text.IDocument;
import org.eclipse.text.edits.MalformedTreeException;
import org.eclipse.text.edits.TextEdit;

import com.ibm.xtools.transform.core.ITransformContext;

public class JavaClassOutputter {

	private static final List<String> defaultImports;
	
	static{
		defaultImports = new ArrayList<String>();
		defaultImports.add("org.eclipse.uml2.uml.*");
		defaultImports.add("org.eclipse.uml2.uml.Package"); // added because some profiles might use it and it might be confused with java.lang.Package
		defaultImports.add("org.eclipse.uml2.uml.Class"); // added because some profiles might use it and it might be confused with java Class type
	}
	
	public static void outputFile(ITransformContext context, Document doc, String filename, String generationStrategyName, String stateMachineName){
		//generate CLass output file
		IResource res = (IResource) context.getTargetContainer(); 
		IPath targetPath = res.getLocation();

		CodeFormatter codeFormatter = ToolFactory.createCodeFormatter(null);

		String code = doc.get();

		TextEdit textEdit = codeFormatter.format(CodeFormatter.K_UNKNOWN, code, 0,code.length(),0,null);
		try {
			//unsure why but sometimes formatted is null
			if (textEdit != null){
				textEdit.apply(doc);
			}else{
				//usually errors appear due to spaces or illegal characters in property names
				IOException exception = new IOException("Generated document has formatting errors: \n" + code);
				throw new UncheckedIOException("Generated document has formatting errors: \n" + code, exception);
			}

			File myFile = new File(filename);
			PrintWriter fw;
			try {
				fw = new PrintWriter(myFile);

				fw.write("/* Generated by " +  generationStrategyName + " from state diagram  " + stateMachineName + " */ \n\n");

				for(String importString: defaultImports){
					fw.write("import " + importString +";");
					fw.write("\n");
				}
				fw.write("\n");
				fw.write(doc.get());
				fw.flush();
				fw.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		} catch (MalformedTreeException e) {
			e.printStackTrace();
		} catch (BadLocationException e) {
			e.printStackTrace();
		}   

	}
}
