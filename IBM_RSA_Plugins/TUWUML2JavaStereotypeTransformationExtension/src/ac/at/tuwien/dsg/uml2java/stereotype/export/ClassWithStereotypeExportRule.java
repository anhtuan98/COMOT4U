package ac.at.tuwien.dsg.uml2java.stereotype.export;

/**
 * Class extending the IBM RSA com.ibm.xtools.transform.uml2.java.internal.ClassTransform to also
 * consider the attributes of the applied Stereotype when exporting from UML class diagram to Java code
 * 
 * __author__ = "TU Wien, Distributed System's Group", http://www.infosys.tuwien.ac.at/
 * __copyright__ = "Copyright 2016, TU Wien, Distributed Systems Group"
 * __license__ = "Apache LICENSE V2.0"
 * __maintainer__ = "Daniel Moldovan"
 * __email__ = "d.moldovan@dsg.tuwien.ac.at"
 */

import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.impl.EClassImpl;
import org.eclipse.jdt.core.Flags;
import org.eclipse.jdt.core.IPackageFragment;
import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.CompilationUnit;
import org.eclipse.jdt.core.dom.Javadoc;
import org.eclipse.jdt.core.dom.StringLiteral;
import org.eclipse.jdt.core.dom.TagElement;
import org.eclipse.jdt.core.dom.TypeDeclaration;
import org.eclipse.jdt.core.jdom.DOMFactory;
import org.eclipse.jdt.core.jdom.IDOMCompilationUnit;
import org.eclipse.jdt.core.jdom.IDOMField;
import org.eclipse.jdt.core.jdom.IDOMMethod;
import org.eclipse.uml2.uml.Class;

import com.ibm.xtools.transform.core.ITransformContext;
import com.ibm.xtools.transform.uml2.impl.internal.java5.ClassRule;

import org.eclipse.jdt.internal.core.jdom.DOMBuilder;
import org.eclipse.jdt.internal.core.jdom.DOMNode;


public class ClassWithStereotypeExportRule extends ClassRule {

	protected Object createTarget(ITransformContext context) {
		  
	    /**
	     * Retrieve the target DOM generated by the UML2Java standard transformation
	     */
		DOMNode target = (DOMNode) context.getTarget();
		
		/**
		 * Create a DOMFactory to be usd in instantiating new DOM elements
		 */
		DOMFactory domFactory = new DOMFactory();
			
		/**
		 * Get the transformation UML Class
		 */
		Class umlCls = (Class) context.getSource();

		/**
		 * We go through all applied stereotypes and for each we go through each attribute, and create a class field.
		 */
		
		for (EObject stereotype:umlCls.getStereotypeApplications() ) {
			/**
			 * Get the stereotype class which contains all attributes			
			 */
			EClass eClass = ((EObject) stereotype).eClass();
			
			for (EAttribute attribute :  eClass.getEAllAttributes()) {
				String name = attribute.getName();
				EDataType type = attribute.getEAttributeType();
				String typeName = type.getInstanceClassName();
				/**
				 * Create Java field/class variable for each attribute 
				 */
				IDOMField field = domFactory.createField();
				field.setName(name);
				field.setFlags(Flags.AccPrivate);
				/**
				 * In case the model is incomplete, we add the field with Object as type
				 */
				if (typeName == null){
					field.setType("Object");
					//add in the generated code a comment explaining why field type is Object
					field.setComment("/*Type for attribute \"" + name + "\" on stereotype \"" + stereotype + "\" is null */");
					System.err.println("Type for attribute \"" + name + "\" on stereotype \"" + stereotype + "\" is null");
				}else{
					field.setType(typeName);
				}
			
				target.addChild(field);
				
				/**
				 * Add setter/getter for the added field
				 */
				IDOMMethod setter = domFactory.createMethod();
				/**
				 * Capitalize the first letter of the variable name so we have nice camel-case 
				 */
				setter.setName("set" + name.substring(0, 1).toUpperCase() + name.substring(1));
				setter.setFlags(Flags.AccPublic);
				setter.setReturnType("void");
				setter.addParameter(typeName, name);
				setter.setBody("{ \n this." + name + "=" + name + ";\n }");
				
				target.addChild(setter);
				
				IDOMMethod getter = domFactory.createMethod();
				getter.setName("get" + name.substring(0, 1).toUpperCase() + name.substring(1));
				getter.setFlags(Flags.AccPublic);
				getter.setReturnType(typeName);
				getter.setBody("{ \n return this." + name + ";\n }");
				
				target.addChild(getter);
				
			}
			
		}
		return target;
	}

	public boolean isSourceConsumed(ITransformContext context) {
		return false;
	}

	public boolean canAccept(ITransformContext context) {
		Class umlCls = (Class) context.getSource();
		return umlCls.getStereotypeApplications().size()>0;
	}
	
	
	
}
